{"version":3,"sources":["components/Spinner.js","components/Character.js","constants.js","components/CharactersData.js","index.js","App.js"],"names":["className","props","loading","Spinner","src","img","alt","name","status","species","sex","origin","lastlocation","lastdimension","lastepisode","lastepisodename","allepisodes","map","n","key","API_URL","getEpisodeNumber","character","episode","length","split","Characters","currentpage","episodesList","countCharacters","useState","characterList","setCharacterList","characters","setCharacter","setLoading","useEffect","count_array","i","push","a","async","axios","get","then","data","id","Character","image","gender","getOrigin","getlastlocation","getlastdimension","getlastepisodename","getAllEpisodes","replace","slice","location","locationDimension","episodelist","number","numberOfEpisodes","episodesnumber","ReactDOM","render","setNumberOfPages","setCountCharacters","countEpisodes","setCountEpisodes","episodes","setepisodes","setEpisodesList","info","pages","count","catch","err","console","log","document","getElementById"],"mappings":"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","file":"static/js/main.98f9bf64.chunk.js","sourcesContent":["import React from 'react'\n\nexport default () => {\n\treturn (\n\t\t<div className=\"spinner\">\n\t\t\t <span className=\"spinner-inner-1\"></span>\n\t\t\t <span className=\"spinner-inner-2\"></span>\n\t\t\t <span className=\"spinner-inner-3\"></span>\n\t\t</div>\n\t)\n}","import React from 'react'\nimport Spinner from './Spinner'\n\nexport default (props) => {\n\n    return (props.loading)\n        ? <Spinner />\n        : (\n            <ul>\n                <article >\n                    <div className=\"flip-card-container\">\n\n                        <div className=\"flip-card\">\n                            <div className=\"flip-card-front\">\n                                <header>\n                                    <div className='shadow'>\n                                        <img src={props.img} alt={props.name} className='card__img' />\n                                    </div>\n                                    <h2>{props.name}</h2>\n                                    <h3>{props.status}</h3>\n                                </header>\n                                <div className='info'>\n                                    <span>species</span>\n                                    <p>{props.species}</p>\n                                </div>\n                                <div className='info'>\n                                    <hr />\n                                    <span>sex</span>\n                                    <p>{props.sex}</p>\n                                </div>\n                                <div className='info'>\n                                    <hr />\n                                    <span>origin</span>\n                                    <p>{props.origin}</p>\n                                </div>\n                                <div className='info'>\n                                    <hr />\n                                    <span>last location</span>\n                                    <p>{props.lastlocation}</p>\n                                </div>\n                                <div className='info'>\n                                    <hr />\n                                    <span>last dimension</span>\n                                    <p>{props.lastdimension}</p>\n                                </div>\n                                <div className='info'>\n                                    <hr />\n                                    <span>last episode seen</span>\n                                    <p>ep. {props.lastepisode} <br />\n                                        {props.lastepisodename}</p>\n                                </div>\n                            </div>\n\n                            <div className=\"flip-card-back\">\n                                <div className=\"card-back-info\">\n                                    <h1> Episodes </h1>\n                                    {props.allepisodes.map(n => {\n                                        return <span key={n}> {n} </span>\n                                    })}\n\n                                </div>\n                            </div>\n\n\n                        </div>\n\n                    </div>\n                </article>\n            </ul >\n\n        )\n}\n","export const API_URL = \"https://rickandmortyapi.com/api/\"","import React, { useEffect, useState } from 'react'\nimport Character from './Character'\nimport axios from 'axios'\nimport { API_URL } from '../constants'\n\n\n\n\nconst getEpisodeNumber = (character) => {\n    const episodelink = character.episode[character.episode.length - 1]\n    return episodelink.split('/episode/')[1]\n}\n\n\n\n\nexport default function Characters({ currentpage, episodesList, countCharacters }) {\n    const [characterList, setCharacterList] = useState()\n    const [characters, setCharacter] = useState([])\n    const [loading, setLoading] = useState(false)\n    const currentPage = currentpage || 1\n\n    // useEffect(() => {\n    //     let mounted = true; //fix this error index.js:1 Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\n\n    //     setLoading(true)\n    //     axios.get(`${API_URL}character/?page=${currentPage}`).then(data => {\n    //         if (mounted) {\n    //             setCharacter(data.data.results)\n    //             setLoading(false)\n    //         }\n    //     }).then(err => console.log(err))\n    //     return () => {\n    //         console.log('unmounted')\n    //         mounted = false\n    //     }\n    // }, [currentPage])\n\n\n    //\n    // -------- Some picture doesnt load and throw error\n    //\n\n    useEffect(() => {\n        setLoading(true)\n        if (countCharacters) {\n            let count_array = []\n            for (let i = 1; i <= countCharacters; i++) {\n                count_array.push(i)\n            }\n            const fetchData = async () => {\n                axios.get(`${API_URL}character/${count_array}`).then((data) => {\n                    setCharacterList(data.data)\n\n                })\n            }\n            fetchData()\n        }\n    }, [countCharacters])\n\n    useEffect(() => {\n        if (characterList) {\n            setCharacter(characterList)\n            setLoading(false)\n        }\n    }, [characterList])\n\n    const renderCharacter = (character) => {\n        return (\n            <Character\n                key={character.id}\n                img={character.image}\n                name={character.name}\n                status={character.status}\n                species={character.species}\n                sex={character.gender}\n                origin={getOrigin(character)}\n                lastlocation={getlastlocation(character)}\n                lastdimension={getlastdimension(character)}\n                lastepisode={getEpisodeNumber(character)}\n                lastepisodename={getlastepisodename(episodesList, getEpisodeNumber(character))}\n                loading={loading}\n\n                //Get all episodes to show at the back of the card\n                allepisodes={getAllEpisodes(character)}\n            />\n\n\n        )\n    }\n    return (\n        <div className=\"main-nav\">\n            <h1 className=\"title\">Characters</h1>\n            <p className=\"c-count\">count - {characters.length}</p>\n            <div id='grid'>\n                {characters.map(renderCharacter)}\n            </div>\n        </div>\n    )\n}\n\n\n\nfunction getOrigin(character) {\n    const origin = character.origin.name.replace('(', ' - ')\n    return origin.slice(0, -1)\n}\n\nfunction getlastlocation(character) {\n    const lastlocation = character.location.name.split('(')[0]\n    return lastlocation;\n}\n\nfunction getlastdimension(character) {\n    const locationname = character.location.name\n    const locationDimension = locationname.split('(')[1]\n    if (!locationDimension) { return \"unknown\" }\n    const lastDimension = locationDimension.slice(0, -1)\n    return lastDimension\n}\n\nfunction getlastepisodename(episodelist, number) {\n    const lastepisodename = episodelist[number - 1].name\n    if (lastepisodename) {\n        return (episodelist[number - 1].name)\n    } return 'unknown'\n}\n\nconst getAllEpisodes = (character) => {\n    const numberOfEpisodes = character.episode.length - 1\n    let episodesnumber = []\n    for (let i = 0; i <= numberOfEpisodes; i++) {\n        episodesnumber.push(character.episode[i].split('/episode/')[1])\n    }\n    // if (episodesnumber.length >= 10) { //in case show only the last 10 episodes\n    //     let lastten = []\n    //     lastten = episodesnumber.slice(Math.max(episodesnumber.length - 10, 1))\n    //     return lastten\n    // }\n\n    return episodesnumber\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport Pages from './components/Pages'\nimport CharactersData from './components/CharactersData'\nimport { API_URL } from './constants'\nimport './styles/styles.scss'\n\nexport default () => {\n    const [loading, setLoading] = useState(false)\n\n    const [pages, setNumberOfPages] = useState()\n    const [countCharacters, setCountCharacters] = useState()\n    const [currentpage, setCurrentPage] = useState(1)\n\n\n    const [countEpisodes, setCountEpisodes] = useState()\n    const [episodes, setepisodes] = useState([])\n    const [episodesList, setEpisodesList] = useState([])\n\n\n    useEffect(() => {\n        setLoading(true)\n\n        axios.get(`${API_URL}character/`).then(data => {\n            setNumberOfPages(data.data.info.pages)\n            setCountCharacters(data.data.info.count)\n\n        }).catch(err => console.log(err))\n\n        axios.get(`${API_URL}episode/`).then(data => {\n            setCountEpisodes(data.data.info.count)\n\n        }).catch(err => console.log(err))\n    }, [])\n\n    //\n    // --------- Fetch All Episodes from the API\n    //\n    useEffect(() => {\n\n        setLoading(true)\n\n        if (countEpisodes) {\n\n            let count_array = []\n            for (let i = 1; i <= countEpisodes; i++) {\n                count_array.push(i)\n            }\n\n            axios.get(`${API_URL}episode/${count_array}`).then((data) => {\n                setepisodes(data.data)\n                setLoading(false)\n            }).catch(err => console.log(err))\n        }\n    }, [countEpisodes])\n\n    // ---- Make sure doens't throw error if array empty\n\n    useEffect(() => {\n\n        if (episodes.length > 0) {\n\n            setEpisodesList(episodes)\n\n        }\n    }, [episodes])\n\n    return (\n        <div>\n            {loading ? (\n                <div className=\"spinner\">\n                    <span className=\"spinner-inner-1\"></span>\n                    <span className=\"spinner-inner-2\"></span>\n                    <span className=\"spinner-inner-3\"></span>\n                </div>\n            ) : (\n\n                    <div>\n                        <img className='title' src=\"https://carlisletheacarlisletheatre.org/images/rick-and-morty-logo-svg-3.png\" alt='Rick and Morty' />\n                        <CharactersData currentpage={currentpage} episodesList={episodesList} countCharacters={countCharacters} />\n                        {/* <Pages totalPages={pages} setPage={setCurrentPage} currentpage={currentpage} /> */}\n                    </div>\n                )}\n        </div>\n    )\n}"],"sourceRoot":""}